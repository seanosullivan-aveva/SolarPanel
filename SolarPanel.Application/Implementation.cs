using SolarPanel.Data;
using SolarPanel.Logic.Utilities;

public class Implementation
{
    public static void ReadData()
    {
        foreach(var solarPanel in PanelProvider.Instance.SolarPanels)
        {
            Console.WriteLine($"Model:{solarPanel.Model} - {solarPanel.Manufacturer}");
        }
    }

    public static void SingleHouseAndPanel()
    {
        var house = HouseProvider.Instance.Houses.First(o => o.Id == "Seans House");
        var panel = PanelProvider.Instance.SolarPanels.First(o => o.Model == "PowerXT® Pure Black™400W");
        var tariff = TariffProvider.Instance.Tariffs.First(o => o.Name == "Test");
        
        // Compute the number of panels that can be fitted to the house
        int numberOfPanels = HouseUtilities.MaxNumberOfPanels(house, panel);

        var fitted = new HouseWithPanel(house, panel, numberOfPanels);

        // Compute the purchase price of the panels
        float panelPurchaseCost = numberOfPanels * panel.Cost;
        // Compute the installation cost of the panels
        float installationCost = numberOfPanels * panel.InstallationCost;
        // Compute the total cost of installation and purchase
        float totalCost = panelPurchaseCost + installationCost;

        // Now project into the future looking to see how much electricity is generated by 
        // this house over the coming years
        DateTime now = DateTime.Now;

        float totalMoneyGenerated = 0f;

        int numberOfYears = 25;

        bool brokeEven = false;

        foreach(var day in DateProvider.Instance.GetDays(now, DateProvider.Instance.ComputeYears(now, numberOfYears)))
        {
            // Get the average number of usable daylight hours for today 
            float usableDaylightHours = DaylightProvider.Instance.GetUsableDaylight(day.Month);

            float kiloWatts = HouseUtilities.PowerGeneratedForHouse(fitted, usableDaylightHours) / 1000f;

            float dailyKiloWattsHouseConsumption = house.DaylightElectricityConsumption / 1000f;

            // Work out how much power is consumed by the house
            float leftOverKiloWatts = kiloWatts - dailyKiloWattsHouseConsumption;

            float kiloWattHoursSentToGrid;
            float kiloWattHoursConsumedByHouse;

            if(leftOverKiloWatts > 0f)
            {
                // We have some left over to send to the grid
                kiloWattHoursSentToGrid = leftOverKiloWatts;
                kiloWattHoursConsumedByHouse = dailyKiloWattsHouseConsumption;
            }
            else
            {
                // It's all consumed by the house
                kiloWattHoursSentToGrid = 0;
                kiloWattHoursConsumedByHouse = kiloWatts;
            }

            // Use the house energy tariff to compute how much was saved from the electricity bill
            float dailySavingOnElectricityBillPounds = house.ElectricityCost * kiloWattHoursConsumedByHouse;

            // Compute the tariff cost
            float dayTariffPencePerKilowattHour = day <= tariff.Expiry ? tariff.Price : tariff.ExpiredPrice;
            float dayTariffPoundPerKilowattHour = dayTariffPencePerKilowattHour / 100f;

            // Use the feed in tariff to compute how much is paid by the electicity supplies
            float dailyProfit = kiloWattHoursSentToGrid * dayTariffPoundPerKilowattHour;

            // Increment the total money for today
            totalMoneyGenerated += dailySavingOnElectricityBillPounds + dailyProfit;

            if(brokeEven == false && totalMoneyGenerated > totalCost)
            {
                // We've broken even!
                brokeEven = true;
                Console.WriteLine($"Break even date: {day.ToShortDateString()}");
            }
        } 

        float totalProfitOverTimePeriod = totalMoneyGenerated - totalCost;

        if(totalProfitOverTimePeriod >= 0f)
        {
            Console.WriteLine($"Good - Over {numberOfYears} years the system will generate {totalProfitOverTimePeriod} pounds profit");
        }
        else
        {
            Console.WriteLine($"Bad - Over {numberOfYears} years the system will generate {-totalProfitOverTimePeriod} pounds loss");
        }
    }
}