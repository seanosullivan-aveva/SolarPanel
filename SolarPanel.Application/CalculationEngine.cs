using SolarPanel.Data;
using SolarPanel.Logic.Utilities;
using SolarPanel.Types;

namespace SolarPanel.Application
{
    public class CalculationResult
    {
        public CalculationResult(
            float installationCost,
            float panelCost,
            float totalInitialOutlay,
            DateTime? breakEvenDate,
            TimeSpan? timeToBreakEven,
            float totalProfit,
            float savedOnBills,
            float generationProfit)
        {
            InstallationCost = installationCost;
            PanelCost = panelCost;
            TotalInitialOutlay = totalInitialOutlay;
            BreakEvenDate = breakEvenDate;
            TimeToBreakEven = timeToBreakEven;
            TotalProfit = totalProfit;
            SavedOnBills = savedOnBills;
            GenerationProfit = generationProfit;
        }

        /// <summary>
        /// The installation costs (£)
        /// </summary>
        public float InstallationCost { get; }
        /// <summary>
        /// The purchase cost of the panels (£)
        /// </summary>
        public float PanelCost { get; }
        /// <summary>
        /// The total initial outlay (£)
        /// </summary>
        public float TotalInitialOutlay { get; }
        /// <summary>
        /// The break even date
        /// </summary>
        public DateTime? BreakEvenDate { get; }
        /// <summary>
        /// The time it takes to break even
        /// </summary>
        public TimeSpan? TimeToBreakEven { get; }
        /// <summary>
        /// The total profit from installing the panels (£)
        /// </summary>
        public float TotalProfit { get; }
        /// <summary>
        /// The amount saved on bills (£)
        /// </summary>
        public float SavedOnBills { get; }
        /// <summary>
        /// The amount made from selling electricity back to the grid (£)
        /// </summary>
        public float GenerationProfit { get; }
    }

    /// <summary>
    /// Provides calculation capabilities for computing solar panel profits
    /// </summary>
    internal class CalculationEngine
    {
        public static CalculationResult Compute(House house, Panel panel, Tariff tariff, Installer installer, int numberOfYears)
        {
            // Compute the number of panels that can be fitted to the house
            int numberOfPanels = HouseUtilities.MaxNumberOfPanels(house, panel);

            var fitted = new HouseWithPanel(house, panel, numberOfPanels);

            // Compute the purchase price of the panels
            float panelPurchaseCost = numberOfPanels * panel.Cost;
            // Compute the installation cost of the panels
            float installationCost = installer.CallOutCost + (numberOfPanels * installer.CostPerPanel);

            // Compute the total cost of installation and purchase
            float totalCost = panelPurchaseCost + installationCost;

            // Now project into the future looking to see how much electricity is generated by 
            // this house over the coming years
            DateTime now = DateTime.Now;

            float totalMoneyGenerated = 0f;
            float totalMoneySavedOnBills = 0f;
            float totalMoneyMadeInProfit = 0f;

            DateTime? breakEvenDate = null;

            foreach (var day in DateProvider.Instance.GetDays(now, DateProvider.Instance.ComputeYears(now, numberOfYears)))
            {
                // Get the average number of usable daylight hours for today 
                float usableDaylightHours = DaylightProvider.Instance.GetUsableDaylight(day.Month);

                float kiloWatts = HouseUtilities.PowerGeneratedForHouse(fitted, usableDaylightHours) / 1000f;

                float dailyKiloWattsHouseConsumption = house.DaylightElectricityConsumption / 1000f;

                // Work out how much power is consumed by the house
                float leftOverKiloWatts = kiloWatts - dailyKiloWattsHouseConsumption;

                float kiloWattHoursSentToGrid;
                float kiloWattHoursConsumedByHouse;

                if (leftOverKiloWatts > 0f)
                {
                    // We have some left over to send to the grid
                    kiloWattHoursSentToGrid = leftOverKiloWatts;
                    kiloWattHoursConsumedByHouse = dailyKiloWattsHouseConsumption;
                }
                else
                {
                    // It's all consumed by the house
                    kiloWattHoursSentToGrid = 0;
                    kiloWattHoursConsumedByHouse = kiloWatts;
                }

                // Use the house energy tariff to compute how much was saved from the electricity bill
                float dailySavingOnElectricityBillPounds = house.ElectricityCost * kiloWattHoursConsumedByHouse;

                // Compute the tariff cost
                float dayTariffPencePerKilowattHour = day <= tariff.Expiry ? tariff.Price : tariff.ExpiredPrice;
                float dayTariffPoundPerKilowattHour = dayTariffPencePerKilowattHour / 100f;

                // Use the feed in tariff to compute how much is paid by the electicity supplies
                float dailyProfit = kiloWattHoursSentToGrid * dayTariffPoundPerKilowattHour;

                // Increment the total money for today
                totalMoneyGenerated += dailySavingOnElectricityBillPounds + dailyProfit;
                totalMoneySavedOnBills += dailySavingOnElectricityBillPounds;
                totalMoneyMadeInProfit += dailyProfit;

                if (breakEvenDate.HasValue == false && totalMoneyGenerated > totalCost)
                {
                    // We've broken even!
                    breakEvenDate = day;
                }
            }

            float totalProfitOverTimePeriod = totalMoneyGenerated - totalCost;

            return new CalculationResult(installationCost,
                                         panelPurchaseCost,
                                         totalCost,
                                         breakEvenDate,
                                         breakEvenDate - now,
                                         totalProfitOverTimePeriod,
                                         totalMoneySavedOnBills,
                                         totalMoneyMadeInProfit);
        }
    }
}
